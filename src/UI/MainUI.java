package UI;

import feedForward.FFTrain;
import feedForward.FFData;
import feedForward.FForecast;
//import main.FFNeuralNetwork;
import java.awt.CardLayout;
import java.awt.Image;
import java.awt.Toolkit;
//import sun.awt.image.ToolkitImage;
import java.awt.Graphics;  
 import javax.swing.JPanel;  
import java.awt.Component;
import java.awt.Cursor;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.image.ImageObserver;
import java.awt.image.ImageProducer;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.EventObject;
import java.util.List;
import java.util.Random;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.border.LineBorder;
import javax.swing.event.CellEditorListener;
import javax.swing.plaf.ColorUIResource;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.text.Caret;
import javax.swing.text.DefaultCaret;
import javax.swing.text.JTextComponent;
import neuralNetwork.Utility;
import recurrent.RForecast;
import recurrent.RecurrentData;
import recurrent.RecurrentTrain;
//import restApi.ApiCaller;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author sanju singh
 */
public class MainUI extends javax.swing.JFrame {

    /**
     * Creates new form MainUI
     * 
     * 
     */
    
    private static final int DATE_COL = 0;
    private static final int INPUT_COL = 1;
    private static final int EXPECTED_OUTPUT_COL = 2;
    private static final int ACTUAL_OUTPUT_COL = 3;
    
    
    
    public MainUI() {
        try {
            this.iconImage = ImageIO.read(getClass().getResource("/resources/icon.png"));
            
            setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
            initComponents();
        } catch (IOException ex) {
            Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    class MyCustomFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".txt" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".csv");
        }
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "Text documents (*.csv)";
        }
    } 
    
    class MyfnnListener implements PropertyChangeListener{

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            if ("progress" == evt.getPropertyName()) {
            int progress = (Integer) evt.getNewValue();
            jProgressBar1.setValue(progress);
//            taskOutput.append(String.format(
//                    "Completed %d%% of task.\n", task.getProgress()));
        } 
        }
    
    }
    
    class MyRnnListener implements PropertyChangeListener{

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            if ("progress" == evt.getPropertyName()) {
            int progress = (Integer) evt.getNewValue();
            rProgressBar.setValue(progress);
        }
      }
    
    }
    
    
    static MyOwnFocusTraversalPolicy newPolicy;
    private int algo = 1;
    Image iconImage;


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jFrame1 = new javax.swing.JFrame();
        jPanel5 = new javax.swing.JPanel();
        submitBtn = new javax.swing.JButton();
        filePath = new java.awt.TextField();
        jButton4 = new javax.swing.JButton();
        testLabel = new javax.swing.JLabel();
        fCurrencyComboBox = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        hiddenNeurons = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        fOutputNeurons = new javax.swing.JSpinner();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        inputNeurons = new javax.swing.JSpinner();
        jProgressBar1 = new JProgressBar(0, 100);
        finishBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        epochInput = new javax.swing.JSpinner();
        jLabel31 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jFrame2 = new javax.swing.JFrame();
        jPanel7 = new javax.swing.JPanel();
        rSubmitBtn = new javax.swing.JButton();
        rFilePath = new java.awt.TextField();
        jButton6 = new javax.swing.JButton();
        testLabel1 = new javax.swing.JLabel();
        rCurrencyComboBox = new javax.swing.JComboBox<>();
        jLabel26 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        rHiddenNeurons1 = new javax.swing.JSpinner();
        jLabel12 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        rInputNeurons = new javax.swing.JSpinner();
        rOutputNeurons = new javax.swing.JSpinner();
        rHiddenNeurons2 = new javax.swing.JSpinner();
        rProgressBar = new javax.swing.JProgressBar();
        rFinishBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        rSpinner = new javax.swing.JSpinner();
        jLabel30 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new JPanel()
        {
            protected void paintComponent(Graphics g)
            {
                g.setColor( getBackground() );
                g.fillRect(0, 0, getWidth(), getHeight());
                super.paintComponent(g);
            }
        };
        UIManager.put("TabbedPane.contentAreaColor ",ColorUIResource.BLACK);
        UIManager.put("TabbedPane.selected",ColorUIResource.BLACK);
        UIManager.put("TabbedPane.unselectedBackground",ColorUIResource.BLACK); 
        // UIManager.put("TabbedPane.background",ColorUIResource.BLUE);
        UIManager.put("TabbedPane.shadow",ColorUIResource.BLACK);
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new JPanel() {  
            public void paintComponent(Graphics g) {  
                Image img = Toolkit.getDefaultToolkit().getImage(  
                    MainUI.class.getResource("/resources/NNImage.jpg"));  
                g.drawImage(img, 0, 0, this.getWidth(), this.getHeight(), this);  
            }  
        };  ;
        jPanel14 = new JPanel()
        {
            protected void paintComponent(Graphics g)
            {
                g.setColor( getBackground() );
                g.fillRect(0, 0, getWidth(), getHeight());
                super.paintComponent(g);
            }
        };
        jTextArea1 = jTextArea1 = new JTextArea()
        {
            protected void paintComponent(Graphics g)
            {
                g.setColor( getBackground() );
                g.fillRect(0, 0, getWidth(), getHeight());
                super.paintComponent(g);
            }
        };
        jTextArea2 = jTextArea2 = new JTextArea()
        {
            protected void paintComponent(Graphics g)
            {
                g.setColor( getBackground() );
                g.fillRect(0, 0, getWidth(), getHeight());
                super.paintComponent(g);
            }
        };
        jPanel4 = new JPanel()
        {
            protected void paintComponent(Graphics g)
            {
                g.setColor( getBackground() );
                g.fillRect(0, 0, getWidth(), getHeight());
                super.paintComponent(g);
            }
        };
        jTextArea4 = new javax.swing.JTextArea();
        jPanel6 = new JPanel()
        {
            protected void paintComponent(Graphics g)
            {
                g.setColor( getBackground() );
                g.fillRect(0, 0, getWidth(), getHeight());
                super.paintComponent(g);
            }
        };
        jTextArea5 = new javax.swing.JTextArea();
        jPanel8 = new JPanel() {
            public void paintComponent(Graphics g) {
                Image img = Toolkit.getDefaultToolkit().getImage(
                    MainUI.class.getResource("/resources/NNImage.jpg"));
                g.drawImage(img, 0, 0, this.getWidth(), this.getHeight(), this);
            }
        };  ;
        jPanel10 = new JPanel()
        {
            protected void paintComponent(Graphics g)
            {
                g.setColor( getBackground() );
                g.fillRect(0, 0, getWidth(), getHeight());
                super.paintComponent(g);
            }
        };
        jLabel8 = new javax.swing.JLabel();
        CurrencyComboBox = new JComboBox()
        {
            protected void paintComponent(Graphics g)
            {
                g.setColor( getBackground() );
                g.fillRect(0, 0, getWidth(), getHeight());
                super.paintComponent(g);
            }
        };
        jLabel7 = new javax.swing.JLabel();
        testingDataPath = new JTextField()
        {
            protected void paintComponent(Graphics g)
            {
                g.setColor( getBackground() );
                g.fillRect(0, 0, getWidth(), getHeight());
                super.paintComponent(g);
            }
        };
        testingBrowseBtn = new javax.swing.JToggleButton();
        forecastBtn = new javax.swing.JButton();
        jScrollPane1 = new JScrollPane()
        {
            protected void paintComponent(Graphics g)
            {
                g.setColor( getBackground() );
                g.fillRect(0, 0, getWidth(), getHeight());
                super.paintComponent(g);
            }
        };
        Caret caret = new DefaultCaret()
        {
            public void focusGained(FocusEvent e)
            {
                setVisible(true);
                setSelectionVisible(true);
            }
        };
        caret.setBlinkRate( UIManager.getInt("TextField.caretBlinkRate") );

        JTextField textField = new JTextField();
        textField.setEditable(false);
        textField.setCaret(caret);
        //textField.setBorder(new LineBorder(Color.BLACK));
        // textField.setBackground(Color.BLUE);

        DefaultCellEditor dce = new DefaultCellEditor( textField );
        forecastTable = new JTable();
        jPanel12 = new JPanel()
        {
            protected void paintComponent(Graphics g)
            {
                g.setColor( getBackground() );
                g.fillRect(0, 0, getWidth(), getHeight());
                super.paintComponent(g);
            }
        };
        jPanel13 = new javax.swing.JPanel();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jPanel2 = new JPanel()
        {
            protected void paintComponent(Graphics g)
            {
                g.setColor( getBackground() );
                g.fillRect(0, 0, getWidth(), getHeight());
                super.paintComponent(g);
            }
        };
        doneButton1 = new javax.swing.JButton();

        fileChooser.setFileFilter(new MyCustomFilter());

        jFrame1.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jFrame1.setTitle("Train Feed Forward Neural Network");
        jFrame1.setBackground(new java.awt.Color(102, 102, 102));
        jFrame1.setFocusTraversalPolicyProvider(true);
        jFrame1.setIconImage(iconImage);
        jFrame1.setResizable(false);
        jFrame1.setSize(new java.awt.Dimension(580, 420));

        jPanel5.setBackground(new java.awt.Color(51, 51, 51));
        jPanel5.setAlignmentX(0.0F);
        jPanel5.setAlignmentY(0.0F);
        jPanel5.setPreferredSize(new java.awt.Dimension(480, 480));

        submitBtn.setText("Start");
        submitBtn.setOpaque(false);
        submitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBtnActionPerformed(evt);
            }
        });

        filePath.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                filePathFocusGained(evt);
            }
        });
        filePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filePathActionPerformed(evt);
            }
        });

        jButton4.setText("Browse");
        jButton4.setOpaque(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        fCurrencyComboBox.setBackground(new java.awt.Color(56, 56, 56, 0));
        fCurrencyComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "US Dollar", "British Pound", "Euro", "Yen" }));
        fCurrencyComboBox.setOpaque(false);
        fCurrencyComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fCurrencyComboBoxActionPerformed(evt);
            }
        });

        jLabel17.setForeground(new java.awt.Color(240, 240, 240));
        jLabel17.setLabelFor(fCurrencyComboBox);
        jLabel17.setText("Select Currency                                                :");

        jLabel6.setForeground(new java.awt.Color(240, 240, 240));
        jLabel6.setText("Training Data Path:");

        jPanel9.setBackground(new java.awt.Color(51, 51, 51));
        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enter Neurons", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(240, 240, 240))); // NOI18N

        jLabel3.setForeground(new java.awt.Color(240, 240, 240));
        jLabel3.setLabelFor(inputNeurons);
        jLabel3.setText("Input Layer:");
        jLabel3.setToolTipText("");
        jLabel3.setAlignmentY(0.0F);
        jLabel3.setMaximumSize(new java.awt.Dimension(63, 14));
        jLabel3.setMinimumSize(new java.awt.Dimension(63, 14));
        jLabel3.setPreferredSize(new java.awt.Dimension(63, 14));

        jLabel4.setForeground(new java.awt.Color(240, 240, 240));
        jLabel4.setText("Hidden Layer:");

        hiddenNeurons.setModel(new javax.swing.SpinnerNumberModel(1, 1, 500, 1));
        JFormattedTextField format2 = ((JSpinner.DefaultEditor) hiddenNeurons.getEditor()).getTextField();
        format2.addFocusListener(fcsListener);
        hiddenNeurons.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        hiddenNeurons.setOpaque(false);

        jLabel5.setForeground(new java.awt.Color(240, 240, 240));
        jLabel5.setText("Output Layer:");

        fOutputNeurons.setModel(new javax.swing.SpinnerNumberModel(1, null, null, 1));
        JFormattedTextField format3 = ((JSpinner.DefaultEditor) fOutputNeurons.getEditor()).getTextField();
        format3.addFocusListener(fcsListener);
        fOutputNeurons.setEnabled(false);
        fOutputNeurons.setOpaque(false);

        jLabel23.setFont(new java.awt.Font("Kartika", 1, 11)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 153, 102));
        jLabel23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ic_info_outline_white_18dp_1x.png"))); // NOI18N
        jLabel23.setToolTipText("<html>Enter number of neurons in input layer<br>equal to number of input.<br>Range 1 - 500</html>");
        jLabel23.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel24.setFont(new java.awt.Font("Kartika", 1, 11)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 153, 102));
        jLabel24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ic_info_outline_white_18dp_1x.png"))); // NOI18N
        jLabel24.setToolTipText("<html>Enter number of neurons in<br> hidden layer of neural network.<br>Range 1 - 500</html>");

        jLabel25.setFont(new java.awt.Font("Kartika", 1, 11)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(255, 153, 102));
        jLabel25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ic_info_outline_white_18dp_1x.png"))); // NOI18N
        jLabel25.setToolTipText("<html>Number of neurons in output layer<br> of NN, equal to number of output.</html>");

        inputNeurons.setModel(new javax.swing.SpinnerNumberModel(1, 1, 500, 1));
        JFormattedTextField format1 = ((JSpinner.DefaultEditor) inputNeurons.getEditor()).getTextField();
        format1.addFocusListener(fcsListener);
        inputNeurons.setToolTipText("");
        inputNeurons.setOpaque(false);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel23))
                    .addComponent(inputNeurons, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel24))
                    .addComponent(hiddenNeurons, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fOutputNeurons, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel25)))
                .addGap(38, 38, 38))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                            .addComponent(hiddenNeurons)
                            .addComponent(fOutputNeurons))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(inputNeurons))
                .addContainerGap())
        );

        jProgressBar1.setForeground(new java.awt.Color(51, 128, 244));
        jProgressBar1.setStringPainted(true);

        finishBtn.setText("Finish");
        finishBtn.setEnabled(false);
        finishBtn.setOpaque(false);
        finishBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishBtnActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setLabelFor(epochInput);
        jLabel1.setText("Number of Epoch");

        epochInput.setModel(new javax.swing.SpinnerNumberModel(500, 1, 50000, 500));
        JFormattedTextField format0 = ((JSpinner.DefaultEditor) epochInput.getEditor()).getTextField();
        format0.addFocusListener(fcsListener);
        epochInput.setOpaque(false);

        jLabel31.setFont(new java.awt.Font("Kartika", 1, 11)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(255, 153, 102));
        jLabel31.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ic_info_outline_white_18dp_1x.png"))); // NOI18N
        jLabel31.setToolTipText("<html>Number of Iteration to train over training data.<br>Range 1 - 50,000</html>");
        jLabel31.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("         :");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(224, 224, 224)
                .addComponent(testLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(49, 49, 49))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel31)
                                .addGap(82, 82, 82)
                                .addComponent(jLabel14)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(fCurrencyComboBox, 0, 137, Short.MAX_VALUE)
                            .addComponent(epochInput)))
                    .addComponent(jLabel6)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(filePath, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(submitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(finishBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(fCurrencyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(epochInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(3, 3, 3)))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel31, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton4)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(2, 2, 2)
                        .addComponent(filePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(finishBtn)
                    .addComponent(submitBtn))
                .addGap(29, 29, 29)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(testLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 580, Short.MAX_VALUE)
            .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE))
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 420, Short.MAX_VALUE)
            .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE))
        );

        jFrame1.setLocationRelativeTo(null);

        jFrame2.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jFrame2.setTitle("Train Recurrent Neural Network");
        jFrame2.setBackground(new java.awt.Color(102, 102, 102));
        jFrame2.setIconImage(iconImage);
        jFrame2.setResizable(false);
        jFrame2.setSize(new java.awt.Dimension(601, 460));

        jPanel7.setBackground(new java.awt.Color(51, 51, 51));
        jPanel7.setAlignmentX(0.0F);
        jPanel7.setAlignmentY(0.0F);
        jPanel7.setFocusCycleRoot(true);
        jPanel7.setFocusTraversalPolicy(newPolicy);
        jPanel7.setPreferredSize(new java.awt.Dimension(590, 460));

        rSubmitBtn.setText("Start");
        rSubmitBtn.setOpaque(false);
        rSubmitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSubmitBtnActionPerformed(evt);
            }
        });

        rFilePath.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rFilePathFocusGained(evt);
            }
        });
        rFilePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rFilePathActionPerformed(evt);
            }
        });

        jButton6.setText("Browse");
        jButton6.setOpaque(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        rCurrencyComboBox.setBackground(new java.awt.Color(56, 56, 56, 0));
        rCurrencyComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "US Dollar", "British Pound", "Euro", "Yen" }));
        rCurrencyComboBox.setOpaque(false);
        rCurrencyComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rCurrencyComboBoxActionPerformed(evt);
            }
        });

        jLabel26.setForeground(new java.awt.Color(240, 240, 240));
        jLabel26.setText("Select Currency                                                   :");

        jLabel9.setForeground(new java.awt.Color(240, 240, 240));
        jLabel9.setText("Training Data Path:");

        jPanel11.setBackground(new java.awt.Color(51, 51, 51));
        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enter Neurons", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(240, 240, 240))); // NOI18N

        jLabel10.setForeground(new java.awt.Color(240, 240, 240));
        jLabel10.setText("Input Layer:");
        jLabel10.setToolTipText("");
        jLabel10.setAlignmentY(0.0F);
        jLabel10.setMaximumSize(new java.awt.Dimension(63, 14));
        jLabel10.setMinimumSize(new java.awt.Dimension(63, 14));
        jLabel10.setPreferredSize(new java.awt.Dimension(63, 14));

        jLabel11.setForeground(new java.awt.Color(240, 240, 240));
        jLabel11.setText("Hidden Layer:");

        rHiddenNeurons1.setModel(new javax.swing.SpinnerNumberModel(1, 1, 500, 1));
        JFormattedTextField format5 = ((JSpinner.DefaultEditor) rHiddenNeurons1.getEditor()).getTextField();
        format5.addFocusListener(fcsListener);
        rHiddenNeurons1.setNextFocusableComponent(rHiddenNeurons2);
        rHiddenNeurons1.setOpaque(false);

        jLabel12.setForeground(new java.awt.Color(240, 240, 240));
        jLabel12.setText("Output Layer:");

        jLabel27.setFont(new java.awt.Font("Kartika", 1, 11)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(255, 153, 102));
        jLabel27.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ic_info_outline_white_18dp_1x.png"))); // NOI18N
        jLabel27.setToolTipText("<html>Enter number of neurons in input layer<br>equal to number of input.<br>Range 1 - 500</html>");
        jLabel27.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel28.setFont(new java.awt.Font("Kartika", 1, 11)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(255, 153, 102));
        jLabel28.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ic_info_outline_white_18dp_1x.png"))); // NOI18N
        jLabel28.setToolTipText("<html>Enter number of neurons in<br> hidden layer of neural network.<br>Range 1 - 500</html>");

        jLabel29.setFont(new java.awt.Font("Kartika", 1, 11)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(255, 153, 102));
        jLabel29.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ic_info_outline_white_18dp_1x.png"))); // NOI18N
        jLabel29.setToolTipText("<html>Number of neurons in output layer<br> of NN, equal to number of output.</html>");

        rInputNeurons.setModel(new javax.swing.SpinnerNumberModel(1, 1, 500, 1));
        JFormattedTextField format4 = ((JSpinner.DefaultEditor) rInputNeurons.getEditor()).getTextField();
        format4.addFocusListener(fcsListener);
        rInputNeurons.setNextFocusableComponent(rHiddenNeurons1);
        rInputNeurons.setOpaque(false);

        rOutputNeurons.setModel(new javax.swing.SpinnerNumberModel(1, null, null, 1));
        JFormattedTextField format7 = ((JSpinner.DefaultEditor) rOutputNeurons.getEditor()).getTextField();
        format7.addFocusListener(fcsListener);
        rOutputNeurons.setEnabled(false);
        rOutputNeurons.setNextFocusableComponent(rFilePath);
        rOutputNeurons.setOpaque(false);

        rHiddenNeurons2.setModel(new javax.swing.SpinnerNumberModel(1, 1, 500, 1));
        JFormattedTextField format6 = ((JSpinner.DefaultEditor) rHiddenNeurons2.getEditor()).getTextField();
        format6.addFocusListener(fcsListener);
        rHiddenNeurons2.setNextFocusableComponent(rOutputNeurons);
        rHiddenNeurons2.setOpaque(false);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel27))
                    .addComponent(rInputNeurons, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel28))
                    .addComponent(rHiddenNeurons2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rHiddenNeurons1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel29))
                    .addComponent(rOutputNeurons, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rHiddenNeurons1)
                            .addComponent(rOutputNeurons))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rHiddenNeurons2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(rInputNeurons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        rProgressBar.setForeground(new java.awt.Color(51, 128, 244));
        rProgressBar.setStringPainted(true);

        rFinishBtn.setText("Finish");
        rFinishBtn.setEnabled(false);
        rFinishBtn.setOpaque(false);
        rFinishBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rFinishBtnActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setLabelFor(rSpinner);
        jLabel2.setText("Number of Epoch");

        rSpinner.setModel(new javax.swing.SpinnerNumberModel(500, 1, 50000, 500));
        JFormattedTextField format8 = ((JSpinner.DefaultEditor) rSpinner.getEditor()).getTextField();
        format8.addFocusListener(fcsListener);
        rSpinner.setOpaque(false);

        jLabel30.setFont(new java.awt.Font("Kartika", 1, 11)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(255, 153, 102));
        jLabel30.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ic_info_outline_white_18dp_1x.png"))); // NOI18N
        jLabel30.setToolTipText("<html>Number of Iteration to train over training data.<br>Range 1 - 50,000</html>");
        jLabel30.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("          :");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(224, 224, 224)
                        .addComponent(testLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(49, 49, 49))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(rProgressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(jLabel26)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel30)
                                        .addGap(88, 88, 88)
                                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(111, 111, 111)))
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rCurrencyComboBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(rSubmitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rFinishBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(rFilePath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(70, 70, 70))))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(rCurrencyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(rSpinner)
                                .addComponent(jLabel13))
                            .addComponent(jLabel2))
                        .addGap(17, 17, 17)
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9))
                    .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton6)
                    .addComponent(rFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rSubmitBtn, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rFinishBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(testLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 601, Short.MAX_VALUE)
            .addGroup(jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jFrame2Layout.createSequentialGroup()
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 460, Short.MAX_VALUE)
            .addGroup(jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jFrame2Layout.createSequentialGroup()
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        Vector<Component> order = new Vector<Component>(10);
        order.add(rCurrencyComboBox);
        order.add(format8);
        order.add(format4);
        order.add(format5);
        order.add(format6);
        order.add(rFilePath);
        order.add(jButton6);
        order.add(rSubmitBtn);

        newPolicy = new MyOwnFocusTraversalPolicy(order);
        jPanel7.setFocusTraversalPolicy(newPolicy);

        jFrame2.setLocationRelativeTo(null);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Exchange Rate Forecast");
        setIconImage(iconImage);

        jPanel1.setOpaque(false);
        jPanel1.setPreferredSize(new java.awt.Dimension(1360, 610));

        jTabbedPane1.setBackground(new java.awt.Color(204, 204, 204));
        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.setAlignmentX(0.0F);
        jTabbedPane1.setAlignmentY(0.0F);
        jTabbedPane1.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jTabbedPane1.setOpaque(true);

        jPanel3.setBackground(new java.awt.Color(255, 204, 0));
        jPanel3.setForeground(new java.awt.Color(255, 255, 255));

        jPanel14.setBackground(new java.awt.Color(56, 56, 56, 30));
        jPanel14.setForeground(new java.awt.Color(255, 255, 255));
        jPanel14.setOpaque(false);

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(255, 255, 255, 220));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("SansSerif", 0, 30)); // NOI18N
        jTextArea1.setForeground(new java.awt.Color(51, 51, 51));
        jTextArea1.setRows(5);
        jTextArea1.setText("Forecasting Foreign Exchange Rate Using Neural Network");
        jTextArea1.setAlignmentX(2.0F);
        jTextArea1.setAlignmentY(2.0F);
        jTextArea1.setAutoscrolls(false);
        jTextArea1.setCaretColor(new java.awt.Color(204, 255, 102));
        jTextArea1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextArea1.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        jTextArea1.setEnabled(false);
        jTextArea1.setFocusable(false);
        jTextArea1.setMargin(new java.awt.Insets(10, 10, 10, 10));
        jTextArea1.setOpaque(false);
        jTextArea1.setRequestFocusEnabled(false);
        jTextArea1.setSelectedTextColor(new java.awt.Color(255, 0, 0));
        jTextArea1.setSelectionColor(new java.awt.Color(255, 51, 51));
        jTextArea1.setSelectionEnd(0);
        jTextArea1.setSelectionStart(0);
        jTextArea1.setVerifyInputWhenFocusTarget(false);

        jTextArea2.setEditable(false);
        jTextArea2.setBackground(new java.awt.Color(255, 255, 255, 220));
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        jTextArea2.setForeground(new java.awt.Color(51, 51, 51));
        jTextArea2.setRows(5);
        jTextArea2.setText("Currency exchange is the trading of one currency against another.\nExample:\nBusiness Typically have to deal with currency exchange when they conduct trade outside their home country.\nInvestors, commercial and investment banks also participate in the currency market, as well as government \nand central bank when they try to adjust economic imbalances.\nCurrency exchange rate are always quoted for a currency pair using ISO code abbreviations. For example, INR/USD.\nIn terms of trading volume, Forex is the world’s largest market.\n\n");
        jTextArea2.setAlignmentX(2.0F);
        jTextArea2.setAlignmentY(2.0F);
        jTextArea2.setAutoscrolls(false);
        jTextArea2.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        jTextArea2.setEnabled(false);
        jTextArea2.setFocusable(false);
        jTextArea2.setMargin(new java.awt.Insets(10, 10, 10, 10));
        jTextArea2.setOpaque(false);
        jTextArea2.setRequestFocusEnabled(false);
        jTextArea2.setVerifyInputWhenFocusTarget(false);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255, 220));
        jPanel4.setForeground(new java.awt.Color(255, 255, 255));
        jPanel4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel4.setInheritsPopupMenu(true);
        jPanel4.setOpaque(false);
        jPanel4.setPreferredSize(new java.awt.Dimension(400, 58));
        jPanel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel4MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel4MouseExited(evt);
            }
        });

        jTextArea4.setEditable(false);
        jTextArea4.setBackground(new java.awt.Color(255, 255, 255, 180));
        jTextArea4.setColumns(20);
        jTextArea4.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jTextArea4.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea4.setRows(5);
        jTextArea4.setText("Feed Forward Neural Network");
        jTextArea4.setAlignmentX(2.0F);
        jTextArea4.setAlignmentY(2.0F);
        jTextArea4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jTextArea4.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jTextArea4.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        jTextArea4.setEnabled(false);
        jTextArea4.setFocusable(false);
        jTextArea4.setOpaque(false);
        jTextArea4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextArea4MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTextArea4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jTextArea4MouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(175, 175, 175)
                .addComponent(jTextArea4, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(114, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextArea4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255, 220));
        jPanel6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel6.setInheritsPopupMenu(true);
        jPanel6.setOpaque(false);
        jPanel6.setPreferredSize(new java.awt.Dimension(400, 58));
        jPanel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel6MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel6MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel6MouseExited(evt);
            }
        });

        jTextArea5.setEditable(false);
        jTextArea5.setBackground(new java.awt.Color(255, 255, 255, 180));
        jTextArea5.setColumns(20);
        jTextArea5.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jTextArea5.setForeground(new java.awt.Color(51, 51, 51));
        jTextArea5.setRows(5);
        jTextArea5.setText("Recurrent Neural Network");
        jTextArea5.setAlignmentX(2.0F);
        jTextArea5.setAlignmentY(2.0F);
        jTextArea5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jTextArea5.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jTextArea5.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        jTextArea5.setEnabled(false);
        jTextArea5.setFocusable(false);
        jTextArea5.setOpaque(false);
        jTextArea5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextArea5MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTextArea5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jTextArea5MouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(181, Short.MAX_VALUE)
                .addComponent(jTextArea5, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(113, 113, 113))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextArea5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(170, 170, 170)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextArea1)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextArea2))
                .addContainerGap(125, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(jTextArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jTextArea2, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1371, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 586, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("          Home          ", jPanel3);

        jPanel10.setBackground(new java.awt.Color(56, 56, 56, 180));
        jPanel10.setDoubleBuffered(false);
        jPanel10.setEnabled(false);
        jPanel10.setFocusable(false);
        jPanel10.setOpaque(false);

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Select Currency:");

        CurrencyComboBox.setBackground(new java.awt.Color(56, 56, 56, 0));
        CurrencyComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "US Dollar", "British Pound", "Euro", "Yen" }));
        CurrencyComboBox.setAlignmentX(2.0F);
        CurrencyComboBox.setOpaque(false);

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Testing Data:");

        testingDataPath.setBackground(new java.awt.Color(255, 255, 255, 200));
        testingDataPath.setMargin(new java.awt.Insets(2, 4, 2, 2));
        testingDataPath.setOpaque(false);
        testingDataPath.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                testingDataPathFocusGained(evt);
            }
        });
        testingDataPath.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                testingDataPathMouseClicked(evt);
            }
        });
        testingDataPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testingDataPathActionPerformed(evt);
            }
        });

        testingBrowseBtn.setText("Browse");
        testingBrowseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testingBrowseBtnActionPerformed(evt);
            }
        });

        forecastBtn.setText("Forecast");
        forecastBtn.setOpaque(false);
        forecastBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forecastBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CurrencyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(testingDataPath, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(testingBrowseBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(forecastBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(CurrencyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(testingDataPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(testingBrowseBtn)
                    .addComponent(forecastBtn))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jScrollPane1.setEnabled(false);
        jScrollPane1.setFocusable(false);

        forecastTable.setBackground(new java.awt.Color(56, 56, 56));
        forecastTable.setForeground(new java.awt.Color(255, 255, 255));
        forecastTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", "", "", ""},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "  Date", "  Input", "  Expected Output", "  Actual Output"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        forecastTable.setAlignmentX(20.0F);
        forecastTable.setAlignmentY(20.0F);
        forecastTable.setGridColor(new java.awt.Color(153, 153, 153));
        forecastTable.setIntercellSpacing(new java.awt.Dimension(20, 10));
        forecastTable.setRowHeight(25);
        forecastTable.getTableHeader().setResizingAllowed(false);
        forecastTable.getTableHeader().setReorderingAllowed(false);
        forecastTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                forecastTableFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(forecastTable);
        if (forecastTable.getColumnModel().getColumnCount() > 0) {
            forecastTable.getColumnModel().getColumn(0).setMinWidth(150);
            forecastTable.getColumnModel().getColumn(0).setPreferredWidth(150);
            forecastTable.getColumnModel().getColumn(0).setMaxWidth(150);
            forecastTable.getColumnModel().getColumn(1).setMinWidth(400);
            forecastTable.getColumnModel().getColumn(1).setPreferredWidth(400);
            forecastTable.getColumnModel().getColumn(1).setMaxWidth(400);
            forecastTable.getColumnModel().getColumn(1).setCellEditor(dce);
            forecastTable.getColumnModel().getColumn(2).setMinWidth(150);
            forecastTable.getColumnModel().getColumn(2).setPreferredWidth(150);
            forecastTable.getColumnModel().getColumn(2).setMaxWidth(150);
            forecastTable.getColumnModel().getColumn(3).setMinWidth(150);
            forecastTable.getColumnModel().getColumn(3).setPreferredWidth(150);
            forecastTable.getColumnModel().getColumn(3).setMaxWidth(150);
        }

        jPanel12.setBackground(new java.awt.Color(56, 56, 56, 180));
        jPanel12.setOpaque(false);

        jPanel13.setBackground(new java.awt.Color(56, 56, 56, 180));
        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Algorithm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel13.setOpaque(false);

        jRadioButton2.setBackground(new java.awt.Color(56, 56, 56, 180));
        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButton2.setText("Recurrent Neural Network");
        jRadioButton2.setContentAreaFilled(false);
        jRadioButton2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButton2ItemStateChanged(evt);
            }
        });

        jRadioButton1.setBackground(new java.awt.Color(56, 56, 56, 180));
        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Feed Forward Neural Network");
        jRadioButton1.setContentAreaFilled(false);
        jRadioButton1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButton1ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addComponent(jRadioButton1)
                .addGap(100, 100, 100)
                .addComponent(jRadioButton2)
                .addContainerGap(116, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(56, 56, 56, 180));
        jPanel2.setOpaque(false);

        doneButton1.setText("Train NN");
        doneButton1.setOpaque(false);
        doneButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doneButton1MouseClicked(evt);
            }
        });
        doneButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(doneButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(doneButton1)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(237, 237, 237)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createSequentialGroup()
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(273, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );

        jTabbedPane1.addTab("          Forecast          ", jPanel8);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1376, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Home");

        jScrollPane2.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1371, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void testingBrowseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testingBrowseBtnActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            testingDataPath.setText(file.getAbsolutePath());
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_testingBrowseBtnActionPerformed

    private void doneButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneButton1ActionPerformed
        
    }//GEN-LAST:event_doneButton1ActionPerformed

    private void forecastBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forecastBtnActionPerformed
        
        if(algo == 1){
            startFForecast();
        }else{
            startRForecast();
        }
        
    }//GEN-LAST:event_forecastBtnActionPerformed

    private void startFForecast(){
        
        BufferedReader br = null;
        List<Double> inputValues = new ArrayList<Double>();
        String currency = "";
        int currencyCol;
        int inputCnt, hiddenCnt, outputCnt;
        double expectedOutput = 0;
        String tableRowData[] = new String[4];
        Double output;
                
        File testDataFile = new File(testingDataPath.getText());

        currencyCol = CurrencyComboBox.getSelectedIndex()+1;
        currency = Utility.getCurrency(currencyCol);
        
        File file = new File("FFresource/" + currency + ".csv");
        FileReader fr;

        String[] cols;
        try {          
            br = new BufferedReader(new FileReader(file));
            cols = br.readLine().split(",");
            inputCnt = Integer.parseInt(cols[0]);
            hiddenCnt = Integer.parseInt(cols[1]);
            outputCnt = Integer.parseInt(cols[2]); 
            br.close();
            try{
                
                File testResultFile = new File("FFresource/testing.txt");
                Files.deleteIfExists(testResultFile.toPath());

                br = new BufferedReader(new FileReader(testDataFile));

                int i=0;
                while(true){
                    readDataFromFile(br, inputCnt, inputValues, currencyCol, tableRowData);  

                    FFData data = new FFData();
                    data.setInputNeurons(inputCnt);
                    data.setHiddenNeurons(hiddenCnt);
                    data.setOutputNeurons(outputCnt);
                    data.setCurrencyCol(currencyCol);
                    data.setInputValues(inputValues);

                    FForecast task = new FForecast(data);
                    output = task.forecast();

                    tableRowData[ACTUAL_OUTPUT_COL] = Utility.formatDecimal(output);
                    fillTable(tableRowData, i);
                    i++;


                    try(PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("FFresource/testing.txt", true)))) {
                        out.println("intput: " + tableRowData[INPUT_COL]);
                        out.println("Expected Output: " + tableRowData[EXPECTED_OUTPUT_COL]);
                        out.println("Actual: " + output + "\n");
                    }catch (IOException e) {
                        System.err.println(e);
                    }              
                    
                }
                     
            }catch (FileNotFoundException ex) {
                String msg = "File " + testDataFile.getName() + " not found !!";
                JOptionPane.showMessageDialog(Utility.getActiveFrame(),
                msg, "Error", JOptionPane.WARNING_MESSAGE);
                //DialogBox.setVisible(true);
               // Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }catch (NumberFormatException ex) {
               String msg = "Error reading "+ testDataFile.getName() +".\nFormat is not correct !!";
               JOptionPane.showMessageDialog(Utility.getActiveFrame(),
                msg, "Error", JOptionPane.WARNING_MESSAGE);
              //  DialogBox.setVisible(true);
               // Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }catch(EOFException e){
                System.out.println("History data file is completely read.");
            }
            
            catch (IOException ex) {
                String msg = "Error reading "+ testDataFile.getName() +" !!";
                JOptionPane.showMessageDialog(Utility.getActiveFrame(),
                msg, "Error", JOptionPane.WARNING_MESSAGE);
               // DialogBox.setVisible(true);
               // Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }finally{
                br.close();
            }
        }catch (FileNotFoundException ex) {
            String msg = "Training weights not found for "+ currency +".\nMake sure neural network is trained !! ";
            JOptionPane.showMessageDialog(Utility.getActiveFrame(),
                msg, "Error", JOptionPane.WARNING_MESSAGE);
            //DialogBox.setVisible(true);
            //Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
        }catch (IOException ex) {
            String msg = "Error reading weights file for "+ currency +".\nMake sure neural network is trained properly !! ";
            JOptionPane.showMessageDialog(Utility.getActiveFrame(),
                msg, "Error", JOptionPane.WARNING_MESSAGE);
            //DialogBox.setVisible(true);
           // Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }
    
    private void startRForecast(){
        
        BufferedReader br = null;
        List<Double> inputValues = new ArrayList<Double>();
        String currency = "";
        int currencyCol;
        int inputCnt, hiddenCnt1, hiddenCnt2, outputCnt;
        double expectedOutput = 0;
        String tableRowData[] = new String[4];
        Double output;
                
        File testDataFile = new File(testingDataPath.getText());

        currencyCol = CurrencyComboBox.getSelectedIndex()+1;
        currency = Utility.getCurrency(currencyCol);
        
        File file = new File("RNNresource/" + currency + ".csv");
        FileReader fr;

        String[] cols;
        try {          
            br = new BufferedReader(new FileReader(file));
            cols = br.readLine().split(",");
            inputCnt = Integer.parseInt(cols[0]);
            hiddenCnt1 = Integer.parseInt(cols[1]);
            hiddenCnt2 = Integer.parseInt(cols[2]);
            outputCnt = Integer.parseInt(cols[3]); 
            br.close();
            try{
                
                File testResultFile = new File("RNNresource/testing.txt");
                Files.deleteIfExists(testResultFile.toPath());

                br = new BufferedReader(new FileReader(testDataFile));

                int i=0;
                while(true){
                    readDataFromFile(br, inputCnt, inputValues, currencyCol, tableRowData);  

                    RecurrentData data = new RecurrentData();
                    data.setInputNeurons(inputCnt);
                    data.setHiddenNeurons1(hiddenCnt1);
                    data.setHiddenNeurons2(hiddenCnt2);
                    data.setOutputNeurons(outputCnt);
                    data.setCurrencyCol(currencyCol);
                    data.setInputValues(inputValues);

                    RForecast task = new RForecast(data);
                    output = task.forecast();

                    tableRowData[ACTUAL_OUTPUT_COL] = Utility.formatDecimal(output);
                    fillTable(tableRowData, i);
                    i++;


                    try(PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("RNNresource/testing.txt", true)))) {
                        out.println("intput: " + tableRowData[INPUT_COL]);
                        out.println("Expected Output: " + tableRowData[EXPECTED_OUTPUT_COL]);
                        out.println("Actual: " + output + "\n");
                    }catch (IOException e) {
                        System.err.println(e);
                    }              
                    
                }
                     
            }catch (FileNotFoundException ex) {
                String msg = "File " + testDataFile.getName() + " not found !!";
                JOptionPane.showMessageDialog(Utility.getActiveFrame(),
                msg, "Error", JOptionPane.WARNING_MESSAGE);
               // Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }catch (NumberFormatException ex) {
                String msg = "Error reading "+ testDataFile.getName() +".\nFormat is not correct !!";
                JOptionPane.showMessageDialog(Utility.getActiveFrame(),
                msg, "Error", JOptionPane.WARNING_MESSAGE);
               // DialogBox.setVisible(true);
               // Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }catch(EOFException e){
                System.out.println("History data file is completely read.");
            }catch (IOException ex) {
                String msg = "Error reading "+ testDataFile.getName() +" !!";
                JOptionPane.showMessageDialog(Utility.getActiveFrame(),
                msg, "Error", JOptionPane.WARNING_MESSAGE);
               // DialogBox.setVisible(true);
               // Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }finally{
                br.close();
            }
            
        }catch (FileNotFoundException ex) {
            String msg = "Training weights not found for "+ currency +".\nMake sure neural network is trained !! ";
            JOptionPane.showMessageDialog(Utility.getActiveFrame(),
                msg, "Error", JOptionPane.WARNING_MESSAGE);
            //DialogBox.setVisible(true);
            //Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
        }catch (IOException ex) {
            String msg = "Error reading weights file for "+ currency +".\nMake sure neural network is trained properly !! ";
            JOptionPane.showMessageDialog(Utility.getActiveFrame(),
                msg, "Error", JOptionPane.WARNING_MESSAGE);
            //DialogBox.setVisible(true);
           // Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
        } 
    
    }
    
    private void fillTable(String[] tableRowData, int row){
        
        DefaultTableModel model = (DefaultTableModel) forecastTable.getModel();
        if(row >= forecastTable.getRowCount())
            model.addRow(new Object[]{"", "", "","", ""});
                
        forecastTable.setValueAt(tableRowData[DATE_COL], row, DATE_COL);
        forecastTable.setValueAt(tableRowData[INPUT_COL], row, INPUT_COL);
        forecastTable.setValueAt(tableRowData[EXPECTED_OUTPUT_COL], row, EXPECTED_OUTPUT_COL);
        forecastTable.setValueAt(tableRowData[ACTUAL_OUTPUT_COL], row, ACTUAL_OUTPUT_COL);
        
    }
    
    private void readDataFromFile(BufferedReader br, int inputCnt, List<Double> inputValues,
            int currencyCol, String[] tableRowData)throws NumberFormatException, EOFException, IOException{
        String line;
        String[] cols;
        int flag = 1;
 
        if(inputValues.size() == 0){
            for (int i = 0; i < inputCnt; i++){
                if((line = br.readLine()) != null) {
                    // use comma as separator
                    cols = line.split(",");
                    inputValues.add(Utility.normalize(Double.parseDouble(cols[currencyCol]),currencyCol));
                } else{
                    throw new EOFException();
                }
            }
        } else{
            //shift every input to left and add previous expected output to last
            //and read expected output from next row.
            inputValues.remove(0);
            inputValues.add(Utility.normalize(Double.parseDouble(tableRowData[EXPECTED_OUTPUT_COL]), currencyCol));
        }

        String str;
        str = "" + Utility.formatDecimal(Utility.denormalize(inputValues.get(0),currencyCol));
        Double d;
        for(int j=1;j<inputValues.size();j++){
            d = inputValues.get(j);
            str += ", " + Utility.formatDecimal(Utility.denormalize(d,currencyCol));
        }
        tableRowData[INPUT_COL] = str;
        
        // Read expected output to display.
        if((line = br.readLine()) != null){
            cols = line.split(",");
            tableRowData[EXPECTED_OUTPUT_COL] = Utility.formatDecimal(Double.parseDouble(cols[currencyCol]));
            tableRowData[DATE_COL] = Utility.formatDate(cols[5]);
        } else{
            throw new EOFException();
        }
    }
    
   
    private void doneButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doneButton1MouseClicked
        // TODO add your handling code here:
        if(algo == 1)
            jFrame1.setVisible(true);
        else if(algo == 2)
            jFrame2.setVisible(true);
            
    }//GEN-LAST:event_doneButton1MouseClicked

    private void submitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBtnActionPerformed
        // TODO add your handling code here:
        
        submitBtn.setEnabled(false);
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        
        double minErrorCondition = 0.01;

        FFData data = new FFData();

        data.setCurrencyCol(fCurrencyComboBox.getSelectedIndex()+1);
        data.setInputNeurons((Integer) inputNeurons.getValue());
        data.setHiddenNeurons((Integer) hiddenNeurons.getValue());
        data.setOutputNeurons((Integer) fOutputNeurons.getValue());
        data.setFilePath(filePath.getText());
        data.setEpoch((Integer) epochInput.getValue());
        data.setMinError(minErrorCondition);
        data.setContext(this);
        
        FFTrain task = new FFTrain(data);
        task.addPropertyChangeListener(new MyfnnListener());
        task.execute();        
        
    }//GEN-LAST:event_submitBtnActionPerformed

    private void filePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filePathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filePathActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        filePath.setText(chooseFile());
    }//GEN-LAST:event_jButton4ActionPerformed

    private String chooseFile(){
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            return file.getAbsolutePath();
        } else {
            System.out.println("File access cancelled by user.");
            return "";
        }        
    }
    
    private void fCurrencyComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fCurrencyComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fCurrencyComboBoxActionPerformed

    private void finishBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishBtnActionPerformed
        // TODO add your handling code here:
        jFrame1.dispose();
    }//GEN-LAST:event_finishBtnActionPerformed

    private void filePathFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_filePathFocusGained
        // TODO add your handling code here:
        filePath.selectAll();
    }//GEN-LAST:event_filePathFocusGained

    private void rSubmitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSubmitBtnActionPerformed
        rSubmitBtn.setEnabled(false);
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        
        double minErrorCondition = 0.01;

        RecurrentData data = new RecurrentData();        
       
        data.setCurrencyCol(rCurrencyComboBox.getSelectedIndex()+1);
        data.setInputNeurons((Integer) rInputNeurons.getValue());
        data.setHiddenNeurons1((Integer) rHiddenNeurons1.getValue());
        data.setHiddenNeurons2((Integer) rHiddenNeurons2.getValue());
        data.setOutputNeurons((Integer) rOutputNeurons.getValue());
        data.setFilePath(rFilePath.getText());
        data.setEpoch((Integer)rSpinner.getValue());
        data.setMinError(minErrorCondition);
        data.setContext(this);
        
        RecurrentTrain task = new RecurrentTrain(data);
        task.addPropertyChangeListener(new MyRnnListener());
        task.execute();          
    }//GEN-LAST:event_rSubmitBtnActionPerformed

    private void rFilePathFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rFilePathFocusGained
        // TODO add your handling code here:
        rFilePath.selectAll();
    }//GEN-LAST:event_rFilePathFocusGained

    private void rFilePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rFilePathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rFilePathActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        rFilePath.setText(chooseFile());
    }//GEN-LAST:event_jButton6ActionPerformed

    private void rCurrencyComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rCurrencyComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rCurrencyComboBoxActionPerformed

    private void rFinishBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rFinishBtnActionPerformed
        jFrame2.dispose();
    }//GEN-LAST:event_rFinishBtnActionPerformed

    private void testingDataPathMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_testingDataPathMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_testingDataPathMouseClicked

    private void testingDataPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testingDataPathActionPerformed
        // TODO add your handling code here:
        testingDataPath.selectAll();
    }//GEN-LAST:event_testingDataPathActionPerformed

    private void jRadioButton1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButton1ItemStateChanged
        // TODO add your handling code here:
        algo = 1;
    }//GEN-LAST:event_jRadioButton1ItemStateChanged

    private void jRadioButton2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButton2ItemStateChanged
        // TODO add your handling code here:
        algo = 2;
    }//GEN-LAST:event_jRadioButton2ItemStateChanged

    private void testingDataPathFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_testingDataPathFocusGained
        // TODO add your handling code here:
        testingDataPath.selectAll();
    }//GEN-LAST:event_testingDataPathFocusGained

    private void forecastTableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_forecastTableFocusLost
        forecastTable.getSelectionModel().clearSelection();
    }//GEN-LAST:event_forecastTableFocusLost

    private void jPanel6MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel6MouseExited
         jPanel6.setBackground(new java.awt.Color(255, 255, 255, 220));
        jTextArea5.setDisabledTextColor(new java.awt.Color(51, 51, 51));
    }//GEN-LAST:event_jPanel6MouseExited

    private void jPanel6MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel6MouseEntered
              jPanel6.setBackground(new java.awt.Color(0,145,234,220));
              jTextArea5.setDisabledTextColor(new java.awt.Color(255, 255, 255));
    }//GEN-LAST:event_jPanel6MouseEntered

    private void jPanel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel6MouseClicked
         jTabbedPane1.setSelectedIndex(1);
        algo = 2;
        jRadioButton2.setSelected(true);
    }//GEN-LAST:event_jPanel6MouseClicked

    private void jTextArea5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea5MouseExited
          jPanel6.setBackground(new java.awt.Color(255, 255, 255, 220));
        jTextArea5.setDisabledTextColor(new java.awt.Color(51, 51, 51));
    }//GEN-LAST:event_jTextArea5MouseExited

    private void jTextArea5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea5MouseEntered
           jPanel6.setBackground(new java.awt.Color(0,145,234,220));
              jTextArea5.setDisabledTextColor(new java.awt.Color(255, 255, 255));
    }//GEN-LAST:event_jTextArea5MouseEntered

    private void jTextArea5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea5MouseClicked
        jTabbedPane1.setSelectedIndex(1);
        algo = 2;
        jRadioButton2.setSelected(true);
    }//GEN-LAST:event_jTextArea5MouseClicked

    private void jPanel4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseExited
        jPanel4.setBackground(new java.awt.Color(255, 255, 255, 220));
        jTextArea4.setDisabledTextColor(new java.awt.Color(51, 51, 51));

    }//GEN-LAST:event_jPanel4MouseExited

    private void jPanel4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseEntered
       jPanel4.setBackground(new java.awt.Color(0,145,234,220));
       jTextArea4.setDisabledTextColor(new java.awt.Color(255, 255, 255));

    }//GEN-LAST:event_jPanel4MouseEntered

    private void jPanel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseClicked
        jTabbedPane1.setSelectedIndex(1);
        algo = 1;
        jRadioButton1.setSelected(true);
    }//GEN-LAST:event_jPanel4MouseClicked

    private void jTextArea4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea4MouseExited
         jPanel4.setBackground(new java.awt.Color(255, 255, 255, 220));
        jTextArea4.setDisabledTextColor(new java.awt.Color(51, 51, 51));


    }//GEN-LAST:event_jTextArea4MouseExited

    private void jTextArea4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea4MouseEntered
        jPanel4.setBackground(new java.awt.Color(0,145,234,220));
        jTextArea4.setDisabledTextColor(new java.awt.Color(255, 255, 255));
    }//GEN-LAST:event_jTextArea4MouseEntered

    private void jTextArea4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea4MouseClicked
         jTabbedPane1.setSelectedIndex(1);
        algo = 1;
        jRadioButton1.setSelected(true);
    }//GEN-LAST:event_jTextArea4MouseClicked

    private FocusListener fcsListener = new FocusListener() {
        @Override
        public void focusGained(FocusEvent e) {
            dumpInfo(e);
        }

        @Override
        public void focusLost(FocusEvent e) {
            dumpInfo(e);
        }

        private void dumpInfo(FocusEvent e) {
          
            final Component c = e.getComponent();
            if (c instanceof JFormattedTextField) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        ((JFormattedTextField) c).setText(((JFormattedTextField) c).getText());
                        ((JFormattedTextField) c).selectAll();
                    }
                });
            } 
        }

        private String name(Component c) {
            return (c == null) ? null : c.getName();
        }
        
    };
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                MainUI frame = new MainUI();
                frame.setVisible(true); 
              //  ApiCaller task = new ApiCaller();
               // task.execute();
            }
        });
    }

    public JButton getrFinishBtn() {
        return rFinishBtn;
    }

    public JButton getrSubmitBtn() {
        return rSubmitBtn;
    }
    
    public JButton getFinishBtn() {
        return finishBtn;
    }

    public JButton getSubmitBtn() {
        return submitBtn;
    }
      

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CurrencyComboBox;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton doneButton1;
    private javax.swing.JSpinner epochInput;
    private javax.swing.JComboBox<String> fCurrencyComboBox;
    private javax.swing.JSpinner fOutputNeurons;
    private javax.swing.JFileChooser fileChooser;
    private java.awt.TextField filePath;
    private javax.swing.JButton finishBtn;
    private javax.swing.JButton forecastBtn;
    private javax.swing.JTable forecastTable;
    private javax.swing.JSpinner hiddenNeurons;
    private javax.swing.JSpinner inputNeurons;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JComboBox<String> rCurrencyComboBox;
    private java.awt.TextField rFilePath;
    private javax.swing.JButton rFinishBtn;
    private javax.swing.JSpinner rHiddenNeurons1;
    private javax.swing.JSpinner rHiddenNeurons2;
    private javax.swing.JSpinner rInputNeurons;
    private javax.swing.JSpinner rOutputNeurons;
    private javax.swing.JProgressBar rProgressBar;
    private javax.swing.JSpinner rSpinner;
    private javax.swing.JButton rSubmitBtn;
    private javax.swing.JButton submitBtn;
    private javax.swing.JLabel testLabel;
    private javax.swing.JLabel testLabel1;
    private javax.swing.JToggleButton testingBrowseBtn;
    private javax.swing.JTextField testingDataPath;
    // End of variables declaration//GEN-END:variables
}
